/**
 * LR parser generated by the Syntax tool.
 *
 * https://www.npmjs.com/package/syntax-cli
 *
 *   npm install -g syntax-cli
 *
 *   syntax-cli --help
 *
 * To regenerate run:
 *
 *   syntax-cli \
 *     --grammar ~/path-to-grammar-file \
 *     --mode <parsing-mode> \
 *     --output ~/path-to-output-parser-file.js
 */
/**
 * Matched token text.
 */
declare let yytext: any;
/**
 * Length of the matched token text.
 */
declare let yyleng: any;
/**
 * Storage object.
 */
declare let yy: {};
/**
 * Result of semantic action.
 */
declare let __: any;
/**
 * Result location object.
 */
declare let __loc: any;
declare const EOF = "$";
/**
 * List of productions (generated by Syntax tool).
 */
declare const productions: (number | ((_1: any, _2: any, _3: any) => void))[][];
/**
 * Encoded tokens map.
 */
declare const tokens: {
    NUMBER: string;
    BOOLEAN: string;
    STRING: string;
    SYMBOL: string;
    "'('": string;
    "')'": string;
    $: string;
};
/**
 * Parsing table (generated by Syntax tool).
 */
declare const table: ({
    "0": number;
    "1": number;
    "2": number;
    "4": string;
    "5": string;
    "6": string;
    "7": string;
    "8": string;
    "10"?: undefined;
    "9"?: undefined;
    "3"?: undefined;
} | {
    "10": string;
    "0"?: undefined;
    "1"?: undefined;
    "2"?: undefined;
    "4"?: undefined;
    "5"?: undefined;
    "6"?: undefined;
    "7"?: undefined;
    "8"?: undefined;
    "9"?: undefined;
    "3"?: undefined;
} | {
    "4": string;
    "5": string;
    "6": string;
    "7": string;
    "8": string;
    "9": string;
    "10": string;
    "0"?: undefined;
    "1"?: undefined;
    "2"?: undefined;
    "3"?: undefined;
} | {
    "3": number;
    "4": string;
    "5": string;
    "6": string;
    "7": string;
    "8": string;
    "9": string;
    "0"?: undefined;
    "1"?: undefined;
    "2"?: undefined;
    "10"?: undefined;
} | {
    "0": number;
    "1": number;
    "2": number;
    "4": string;
    "5": string;
    "6": string;
    "7": string;
    "8": string;
    "9": string;
    "10"?: undefined;
    "3"?: undefined;
} | {
    "4": string;
    "5": string;
    "6": string;
    "7": string;
    "8": string;
    "9": string;
    "0"?: undefined;
    "1"?: undefined;
    "2"?: undefined;
    "10"?: undefined;
    "3"?: undefined;
})[];
/**
 * Parsing stack.
 */
declare const stack: any[];
/**
 * Tokenizer instance.
 */
declare let tokenizer: any;
/**
 * Generic tokenizer used by the parser in the Syntax tool.
 *
 * https://www.npmjs.com/package/syntax-cli
 *
 * See `--custom-tokinzer` to skip this generation, and use a custom one.
 */
declare const lexRules: (RegExp | (() => void))[][];
declare const lexRulesByConditions: {
    INITIAL: number[];
};
declare const EOF_TOKEN: {
    type: string;
    value: string;
};
/**
 * Parsing module.
 */
declare const yyparse: {
    /**
     * Sets global parsing options.
     */
    setOptions(options: any): any;
    /**
     * Returns parsing options.
     */
    getOptions(): any;
    /**
     * Parses a string.
     */
    parse(string: any, parseOptions: any): any;
    setTokenizer(customTokenizer: any): {
        setOptions(options: any): any;
        getOptions(): any;
        parse(string: any, parseOptions: any): any;
        setTokenizer(customTokenizer: any): any;
        getTokenizer(): any;
        onParseBegin(string: any, tokenizer: any, options: any): void;
        onParseEnd(parsed: any): void; /**
         * Matched token location data.
         */
        onShift(token: any): any;
    };
    getTokenizer(): any;
    onParseBegin(string: any, tokenizer: any, options: any): void;
    onParseEnd(parsed: any): void;
    /**
     * Allows analyzing, and transforming shifted token. Default implementation
     * just passes the token through.
     */
    onShift(token: any): any;
};
//# sourceMappingURL=generated.d.ts.map